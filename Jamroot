# Copyright 2004-2008 Spencer Olson

echo " Physical constants library:  " ;
echo "---------------" ;
echo " In bjam, there are two ways to import/use this library." ;
echo " 1.  /physical//physical" ;
echo "     This provides includes for the header only library." ;
echo " 2.  /physical//runtime" ;
echo "     This provides includes for the header only library and" ;
echo "     it also provides a library dependency on boost_regex and" ;
echo "     a header-library dependency on boost_math (used to " ;
echo "     define some trig functions on std::complex<> that are" ;
echo "     going to be included in the new standard, but are not" ;
echo "     yet available" ;
echo "---------------" ;
echo "            Possible compile/feature options" ;
echo "              <phys-type>" ;
echo "                Purpose:  Specify the basic type used by the physical library." ;
echo "                values:" ;
echo "                    complex [default] (std::complex<double>)" ;
echo "                    cfloat            (std::complex<float>)" ;
echo "                    double            (double)" ;
echo "                    float             (float)" ;
echo "          To select these features for building add them to the bjam command such as:" ;
echo "          'bjam phys-type=cfloat'" ;
echo "---------------" ;
echo "" ;

# Usage:
#
#   bjam [options] [properties] [install|stage]
#
#   Builds and installs physical.
#
# Targets and Related Options:
#
#   install                 Install headers and compiled library files to the
#   =======                 configured locations (below).
#
#   --prefix=<PREFIX>       Install architecture independent files here.
#                           Default; C:\physical on Win32
#                           Default; /usr/local on Unix. Linux, etc.
#
#   --exec-prefix=<EPREFIX> Install architecture dependent files here.
#                           Default; <PREFIX>
#
#   --libdir=<DIR>          Install library files here.
#                           Default; <EPREFIX>/lib
#
#   --includedir=<HDRDIR>   Install header files here.
#                           Default; <PREFIX>/include
#
#   stage                   Build and install only compiled library files
#   =====                   to the ./stage directory.
#
# Other Options:
#
#   --build-dir=DIR         Build in this location instead of building
#                           within the distribution tree. Recommended!
#
#   --help                  This message.
#
# Properties:
#
#   toolset=toolset         Indicates the toolset to build with.
#
#   variant=debug|release   Select the build variant
#
#   link=static|shared      Whether to build static or shared libraries
#
#   threading=single|multi  Whether to build single or multithreaded binaries
# 
#   runtime-link=static|shared      
#                           Whether to link to static or shared C and C++ runtime.
#   

import feature : feature ;
import path ; # for getting a better glob
import package ; # used for installing whole package (provides --prefix related
                 # options )


path-constant TOP : . ;

constant VERSION : [ MATCH "\\$Revision: *([0-9]*) *\\$" : "$Revision: 636 $" ] ;

use-project /boost : ../boost ;

project /physical
    : requirements
        <include>cxx
        <library>/boost//headers
    : usage-requirements
        <include>cxx
        <library>/boost//headers
        
    # : build-dir build
    ;

lib physical
    : # sources
      [ glob cxx/physical/*.cpp ]
      [ glob cxx/physical/*.h ]
      [ glob cxx/physical/calc/*.h ]
    : <link>static
    : # no default build
    : <include>cxx ;

alias runtime
    : physical
    : # no build requirements
    : # no default build
    : <library>/boost//regex/<link>static
    ;

feature phys-type : complex cfloat double float : composite ;
feature.compose <phys-type>complex : <define>RUNTIME_PHYSICAL_QUANTITY=\"std::complex<double>\" ;
feature.compose <phys-type>cfloat : <define>RUNTIME_PHYSICAL_QUANTITY=\"std::complex<float>\" ;
feature.compose <phys-type>double : <define>RUNTIME_PHYSICAL_QUANTITY=double ;
feature.compose <phys-type>float : <define>RUNTIME_PHYSICAL_QUANTITY=float ;


# installation configuration

# options:
install-properties =
    <install-no-version-symlinks>on
    ;

if [ modules.peek : NT ] {
    install-properties += <install-default-prefix>C:/physical ;
} else if [ modules.peek : UNIX ] {
    install-properties += <install-default-prefix>/usr/local ;
}


# the list of libraries to build and install
local libraries = physical ;
# all headers to install
local all_headers = [ path.glob-tree cxx : *.h *.cpp : .svn ] ;
# docs to install
local docs = [ path.glob-tree docs/api/html docs/api/latex : * : .svn ] ;


# Complete install allowing --prefix and related command line options
alias install : install-code install-docs ;
explicit install ;

# Complete install allowing --prefix and related command line options
package.install install-code
    : $(install-properties)
      <install-source-root>$(TOP)/cxx
    :
    : $(libraries)
    : $(all_headers)
    ;
explicit install-code ;

# install data allowing --prefix and related command line options
package.install install-docs
    : $(install-properties)
      <install-source-root>$(TOP)
      <install-header-subdir>../share/physical
    :
    :
    : $(docs)
    ;
explicit install-docs ;


# install the libs into a staging dir
install stage : $(libraries) ;
explicit stage ;
