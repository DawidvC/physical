# Copyright 2004-2008 Spencer Olson

echo " Physical constants library:  " ;
echo "---------------" ;
echo " In bjam, there are two ways to import/use this library." ;
echo " 1.  /physical//physical" ;
echo "     This provides includes for the header only library." ;
echo " 2.  /physical//runtime" ;
echo "     This provides includes for the header only library and" ;
echo "     it also provides a library dependency on boost_regex and" ;
echo "     a header-library dependency on boost_math (used to " ;
echo "     define some trig functions on std::complex<> that are" ;
echo "     going to be included in the new standard, but are not" ;
echo "     yet available" ;
echo "---------------" ;
echo "            Possible compile/feature options" ;
echo "              <phys-type>" ;
echo "                Purpose:  Specify the basic type used by the physical library." ;
echo "                values:" ;
echo "                    complex [default] (std::complex<double>)" ;
echo "                    cfloat            (std::complex<float>)" ;
echo "                    double            (double)" ;
echo "                    float             (float)" ;
echo "          To select these features for building add them to the bjam command such as:" ;
echo "          'bjam phys-type=cfloat'" ;
echo "---------------" ;
echo "" ;


constant VERSION : [ MATCH "\\$Revision: *([0-9]*) *\\$" : "$Revision: 636 $" ] ;

lib boost_regex : : <name>boost_regex-mt ;
lib boost_unit_test_framework : : <name>boost_unit_test_framework-mt <link>static ;

project /physical
    : requirements
        <include>cxx
    : usage-requirements
        <include>cxx
        
    # : build-dir build
    ;

lib physical
    : # sources
      [ glob cxx/physical/*.cpp ]
      [ glob cxx/physical/*.h ]
      [ glob cxx/physical/calc/*.h ]
    : <link>static
    : # no default build
    : <include>cxx ;

alias runtime
    : physical
    : # no build requirements
    : # no default build
    : <library>/physical//boost_regex ;

import feature : feature ;

feature phys-type : complex cfloat double float : composite ;
feature.compose <phys-type>complex : <define>RUNTIME_PHYSICAL_QUANTITY=\"std::complex<double>\" ;
feature.compose <phys-type>cfloat : <define>RUNTIME_PHYSICAL_QUANTITY=\"std::complex<float>\" ;
feature.compose <phys-type>double : <define>RUNTIME_PHYSICAL_QUANTITY=double ;
feature.compose <phys-type>float : <define>RUNTIME_PHYSICAL_QUANTITY=float ;

